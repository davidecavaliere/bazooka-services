# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: microgamma-api-gateway # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-2

  environment:
    DEBUG: ${env:DEBUG, ''}
    SECRET: ${env:SECRET, 'my-secure-secret'}

plugins:
  - serverless-plugin-monorepo
  - '@microgamma/serverless-apigator'
  - serverless-offline

custom:
  entrypoint: lib/handler
  buildFolder: /home/developer/src/services/packages/apigateway/lib

package:
  exclude:
    ${file(./excludes.yml)}


resources:
  Resources:

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ApiGatewayRestApi

    # Authorizer
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        AuthorizerUri:
          Fn::Join:
          - ''
          -
            - 'arn:aws:apigateway:'
            - Ref: "AWS::Region"
            - ':lambda:path/2015-03-31/functions/'
            - Fn::GetAtt: "GeneralAuthorizerLambdaFunction.Arn"
            - "/invocations"
        IdentitySource: method.request.header.Authorization
        IdentityValidationExpression: ".+"
        RestApiId: { Ref: ApiGatewayRestApi }
        Type: TOKEN
        Name: apigateway-authorizer

    ApiGatewayAuthorizerPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: GeneralAuthorizerLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal:
          Fn::Join: ["",["apigateway.", { Ref: "AWS::URLSuffix"}]]



#    PublicUsagePlan:
#      Type: "AWS::ApiGateway::UsagePlan"
#      DependsOn: ApiGatewayRestApi
#      Properties:
#        UsagePlanName: ${self:service}-${self:provider.stage}-usagePlan
#        Quota:
#          Limit: 10000
#          Offset: 0
#          Period: DAY
#        Throttle:
#          BurstLimit: 20
#          RateLimit: 10
#        ApiStages:
#          -
#            ApiId:
#              Ref: ApiGatewayRestApi
#            Stage: ${self:provider.stage}
#
#    PublicUsagePlanKey:
#      Type: "AWS::ApiGateway::UsagePlanKey"
#      DependsOn: PublicUsagePlan
#      Properties:
#        ApiStages:
#          -
#            ApiId: { Ref:  'ApiGatewayRestApi' }
#            Stage: ${self:provider.stage}
#        KeyId: 'public-usage-plan-key'
#        KeyType: API_KEY
#        UsagePlanId:
#          Ref: PublicUsagePlan
        
  Outputs:
    apiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: apiGateway-restApiId

    apiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      Export:
        Name: apiGateway-rootResourceId

    # The Authorizer (only if you are using an API Gateway authorizer)
    ApiGatewayAuthorizerId:
      Value:
        Ref: ApiGatewayAuthorizer
      Export:
        Name: apigateway-ApiGatewayAuthorizerId

